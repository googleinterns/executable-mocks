// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package mockexec;

option go_package = "github.com/regb/executable-mocks/protos/mockexec";

// Argument represents a single command line argument.
message Argument {
  oneof arg {
    // The argument is a generic string.
    string str_arg = 1;

    // The argument is an input file with the given hash.
    string in_hash = 2;

    // The argument is a path to an output file. Use this field for larger content.
    // Note that either the out_path or the out_content should be set, not both.
    string out_path = 3;

    // The argument is the content of an output file. Use this field for smaller content.
    // Note that either the out_path or the out_content should be set, not both.
    string out_content = 4;
  }
}

// MockCall represents a binary call to mock.
message MockCall {
  // The name of the executable called.
  string binary = 1;

  // The command arguments expected.
  repeated Argument args = 2;
}

// ParallelMockCalls represents a set of calls to mock.
// The execution of the calls can be done in parallel.
message ParallelMockCalls {
  // N mock executions in parallel, order doesn't matter
  repeated MockCall calls = 1;
}

// ExpectedMockCalls represents the expected sequence of calls to mock for a given
// testcase, across all executables.
message ExpectedMockCalls {
  // N mock executions in sequence, order matters
  repeated ParallelMockCalls calls = 1;
}
